import polars as pl
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from statsmodels.tsa.stattools import acf
from statsmodels.tsa.seasonal import seasonal_decompose
from prophet import Prophet
from statsmodels.tsa.statespace.sarimax import SARIMAX
import pandas as pd
from statsmodels.tsa.stattools import acf
import plotly.graph_objects as go
import numpy as np
from statsmodels.tsa.stattools import pacf
import polars as pl
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from statsmodels.tsa.stattools import acf
from statsmodels.tsa.seasonal import seasonal_decompose
from prophet import Prophet
from statsmodels.tsa.statespace.sarimax import SARIMAX
from datetime import timedelta
import pandas as pd
import plotly.figure_factory as ff

import streamlit as st
import pandas as pd

# Caminho do arquivo Excel
caminho = r"C:\Users\Usu√°rio\Downloads\C√≥pia de Resultados Finais - Projeto Congelamento JBS.xlsx"

# Leitura da planilha "Alcatra"
df = pd.read_excel(caminho, sheet_name="Alcatra")
#df.rename(columns={'MATURA√á√ÉO': 'MATURACAO'}, inplace=True)

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise - Alcatra", layout="wide")

st.title("üìä An√°lise Explorat√≥ria - Vari√°veis de Cor (M√âDIAS)")
st.subheader(f"Em cada an√°lise, selecione parte dos gr√°ficos para dar zoom e abstrair os outliars !")
st.divider()
#st.dataframe(df)


# Sele√ß√£o das colunas de interesse
variaveis = ["M√âDIA a*", "M√âDIA b*", "M√âDIA L*"]

# ---------------- Estat√≠sticas descritivas ----------------
st.subheader("üìë Estat√≠sticas por Grupo")

estatisticas = df.groupby("GRUPO")[variaveis].agg(
    ["mean", "std", "var"]
).round(2)

st.dataframe(estatisticas, use_container_width=True)

st.divider()

st.title("üìä Distribui√ß√µes")

# --- Gr√°fico 3D interativo ---

fig_3d = px.scatter_3d(
    df,
    x="M√âDIA a*",
    y="M√âDIA b*",
    z="M√âDIA L*",
    color="GRUPO",
    symbol="GRUPO",
    opacity=0.8,
    title="Espa√ßo de Cor CIELAB (a*, b*, L*)"
)
fig_3d.update_traces(marker=dict(size=5))
st.plotly_chart(fig_3d, use_container_width=True)


variaveis = ["M√âDIA a*", "M√âDIA b*", "M√âDIA L*"]



fig = px.histogram(
    df,
    x='M√âDIA a*',
    color="GRUPO",
    barmode="overlay",
    nbins=50,
    opacity=0.6,
    title=f"Distribui√ß√£o de a* por Controle e Teste")
st.plotly_chart(fig, use_container_width=True)

fig = px.histogram(
    df,
    x='M√âDIA b*',
    color="GRUPO",
    barmode="overlay",
    nbins=100,
    opacity=0.6,
    title=f"Distribui√ß√£o de b* por Controle e Teste")
st.plotly_chart(fig, use_container_width=True)

fig = px.histogram(
    df,
    x='M√âDIA L*',
    color="GRUPO",
    barmode="overlay",
    nbins=300,
    opacity=0.6,
    title=f"Distribui√ß√£o de L* por Controle e Teste")
st.plotly_chart(fig, use_container_width=True)

st.divider()

# ---------------- Boxplots ----------------
st.subheader("Distribui√ß√£o por Teste e Controle (Boxplots)")
for var in variaveis:
    fig = px.box(df, x="GRUPO", y=var, color="GRUPO",
                 title=f"Distribui√ß√£o de {var} por Grupo",
                 points="all")
    st.plotly_chart(fig, use_container_width=True)


st.divider()

st.subheader("Distribui√ß√£o por Tempo de Matura√ß√£o (Boxplots)")
for var in variaveis:
    fig = px.box(df, x="MATURA√á√ÉO ", y=var, color="MATURA√á√ÉO ",
                 title=f"Distribui√ß√£o de {var} por Grupo",
                 points="all")
    st.plotly_chart(fig, use_container_width=True)

st.divider()


# --- Heatmap de correla√ß√£o ---
# Vari√°veis resposta
respostas = ["M√âDIA a*", "M√âDIA b*", "M√âDIA L*"]

# Seleciona todas as num√©ricas
num_cols = df.select_dtypes(include="number").columns.tolist()
del num_cols[6:15]

# Filtra para pegar s√≥ as respostas + todas as outras num√©ricas
corr = df[respostas + num_cols].corr()

# Pega s√≥ as correla√ß√µes das respostas com as demais vari√°veis
corr_focus = corr.loc[respostas, num_cols]

# Cria heatmap
heatmap = ff.create_annotated_heatmap(
    z=corr_focus.values,
    x=list(corr_focus.columns),
    y=list(corr_focus.index),
    annotation_text=corr_focus.round(2).values,
    colorscale="RdBu",
    showscale=True,
    reversescale=True
)

st.subheader("Correla√ß√£o das vari√°veis resposta (a*, b*, L*) com todas as num√©ricas")
st.plotly_chart(heatmap, use_container_width=True)

st.divider()

"""st.subheader("Distribui√ß√£o por Grupo.1 (√ötil?)")
for var in variaveis:
    fig = px.box(df, x="GRUPO.1", y=var, color="GRUPO.1",
                 title=f"Distribui√ß√£o de {var} por Grupo",
                 points="all")
    st.plotly_chart(fig, use_container_width=True)"""
